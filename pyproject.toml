[tool.poetry]
name = "MedicalMultitaskModeling"
version = "1.0.4"
description = "Multitask learning framework for medical data"
authors = [
    "Raphael Sch√§fer <jan.raphael.schaefer@mevis.fraunhofer.de>",
    "Till Nicke <till.nicke@mevis.fraunhofer.de>",
]
license = "All rights reserved."
readme = "README.md"
packages = [{ include = "mmm" }]
include = [{ path = "**/*.jinja2", format = ["sdist", "wheel"] }]

[tool.poetry.scripts]
mmm = "mmm.app:app"

[tool.poetry.dependencies]
python = ">=3.10,<3.12"
wandb = "^0.16.3"
torch = "^2.1.2"
torchvision = "^0.16.2"
scikit-learn = "^1.3.1"
numpy = "^1.26.1"
pydantic = "^2.4.2"
tqdm = "^4.66.1"
imageio = "^2.31.5"
pandas = "^2.1.1"
monai = "^1.3.0"
albumentations = "^1.4.11"
deepdiff = "^6.6.1"
opencv-python = "^4.8.1.78"
patchify = "^0.2.3"
rasterio = "^1.3.9"
shapely = "^2.0.2"
tiffslide = "^2.2.0"
torchinfo = "^1.8.0"
json5 = "^0.9.14"
pydantic-settings = "^2.0.3"
minio = "^7.1.17"
# Extras for fsspec: https://github.com/fsspec/filesystem_spec/blob/master/pyproject.toml
fsspec = { version = "^2024.3.1", extras = ["s3"] }
universal-pathlib = "^0.2.2"

# Optional dependencies which are used in extra groups, maintained by hand
# By design of Poetry, these cannot be specified using optional dependency groups!
# In other words, place them in the main dependencies but as optional!

# Api
fastapi = { extras = ["all"], version = "^0.110.2", optional = true }
aiohttp = { version = "^3.9.0", optional = true }
lightgbm = { version = "^4.1.0", optional = true }
label-studio-converter = { version = "^0.0.58", optional = true }
label-studio-sdk = { version = "^0.0.34", optional = true }
# Export
onnx = { version = "^1.13.1", optional = true }
onnxruntime = { version = "^1.14.1", optional = true }
# Interactive
plotly = { version = "^5.17.0", optional = true }
ipywidgets = { version = "^8.1.1", optional = true }
ipykernel = { version = "^6.25.2", optional = true }
matplotlib = { version = "^3.8.0", optional = true }
seaborn = { version = "^0.13.0", optional = true }
streamlit = { version = "^1.33.0", optional = true }
nbformat = { version = "^5.9.2", optional = true }
nbconvert = { version = "^7.16.1", optional = true }
# Testing
pytest = { version = "^8.0.0", optional = true }
pytest-cov = { version = "^4.0.0", optional = true }
black = { version = "^23.1.0", optional = true }
isort = { version = "^5.10.1", optional = true }
sphinx = { version = "^7.3.7", optional = true }
autodoc-pydantic = { version = "^2.2.0", optional = true }
# Detection
mmdet = { version = "^3.2.0", optional = true }
nibabel = "^5.2.1"
wsi-service = { version = "^0.12.14", source = "empaia", optional = true }
typer = "^0.12.3"
toml = "^0.10.2"
segmentation-models-pytorch = "^0.3.3"

[tool.poetry.group.deploy]
optional = true
[tool.poetry.group.deploy.dependencies]
build = "^0.10.0"
twine = "^4.0.2"

[tool.poetry.extras]
all = [
    "fastapi",
    "aiohttp",
    "lightgbm",
    "label-studio-converter",
    "label-studio-sdk",
    "wsi-service",
    "mmdet",
    "plotly",
    "ipywidgets",
    "ipykernel",
    "matplotlib",
    "seaborn",
    "streamlit",
    "nbformat",
    "nbconvert",
    "black",
    "plotly",
    "ipywidgets",
    "ipykernel",
    "matplotlib",
    "seaborn",
    "streamlit",
    "nbformat",
    "nbconvert",
    "black",
    "pytest",
    "pytest-cov",
    "black",
    "isort",
    "sphinx",
    "autodoc-pydantic",
    "onnx",
    "onnxruntime",
]
api = [
    "fastapi",
    "aiohttp",
    "lightgbm",
    "label-studio-converter",
    "label-studio-sdk",
    "wsi-service",
]
# mmcv is not available on PyPI, therefore the user needs to install it manually
detection = ["mmdet"]
interactive = [
    "plotly",
    "ipywidgets",
    "ipykernel",
    "matplotlib",
    "seaborn",
    "streamlit",
    "nbformat",
    "nbconvert",
    "black",
]
testing = [
    "pytest",
    "pytest-cov",
    "black",
    "isort",
    "sphinx",
    "autodoc-pydantic",
]
export = ["onnx", "onnxruntime"]

[[tool.poetry.source]]
name = "PyPI"
priority = "primary"

[[tool.poetry.source]]
name = "empaia"
url = "https://gitlab.com/api/v4/groups/11254156/-/packages/pypi/simple"
priority = "supplemental"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
